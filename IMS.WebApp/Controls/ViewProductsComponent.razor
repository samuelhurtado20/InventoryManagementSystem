@inject IViewProductsByNameUseCase ViewProductsByNameUseCase

<div class="input-group mb-3">
    <input typeof="text"
    class="form-control form-control-lg"
    placeholder="Type product name here to search" 
    @bind-value="nameToSearch"
    @bind-value:event="oninput" />

    <button type="button" class="input-group-text btn-success"
    @onclick="@(async()=>{await ViewProducts(); })"
    >View</button>
</div>

@if (this.DisplayResult && _products != null && _selectProduct == null)
{
    <div style="overflow-y:auto; max-height:300px; border: 1px solid silver; margin:13px;">
        <ul style="list-style-type:none;">
            @foreach (var prod in _products)
            {
                <li style="cursor:pointer;" @onclick="@( async ()=> { await SelectProduct(prod); })" @key="prod.ProductId">@prod.ProductName</li>
            }
        </ul>
    </div>
}

@code 
{
    private string _nameToSearch;
    public string nameToSearch
    { 
        get => _nameToSearch;        
        set
        {
            _nameToSearch = value;
            if (!string.IsNullOrWhiteSpace(_nameToSearch) && _nameToSearch.Length > 2)
            {
                ViewProducts().ConfigureAwait(true);
            }
        } 
    }
    private List<Product> _products;
    private Product _selectProduct;

    [Parameter]
    public bool DisplayResult { get; set; } = false;

    [Parameter]
    public EventCallback<List<Product>> OnSearchProducts { get; set; }

    [Parameter]
    public EventCallback<Product> OnSelectProduct { get; set; }
    
    private async Task ViewProducts()
    {
        var products = (await ViewProductsByNameUseCase.ExecuteAsync(nameToSearch ?? string.Empty)).ToList();

        await OnSearchProducts.InvokeAsync(products);
        _products = products;
        _selectProduct = null;

        StateHasChanged();
    }

    private async Task SelectProduct(Product product)
    {
        await OnSelectProduct.InvokeAsync(product);
        _selectProduct = product;
    }
}
