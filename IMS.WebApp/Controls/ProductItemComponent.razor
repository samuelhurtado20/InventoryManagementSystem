@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase
@if(Product is not null)
{
    <tr>
        <td>@Product.ProductName</td>
        <td>@Product.Quantity</td>
        <td>@Product.Price.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@( () =>EditProduct(Product.ProductId) )">Edit</button>
            <button type="button" class="btn btn-danger" @onclick="@( () =>DeleteProduct(Product) )">Delete</button>
        </td>
    </tr>
}

@code {
    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback OnProductDeleted { get; set; }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/editProduct/{id}");
    }

    private async Task DeleteProduct(Product product)
    {
        //NavigationManager.NavigateTo($"/deleteProduct/{product}");
        await DeleteProductUseCase.ExecuteAsync(product);
        await OnProductDeleted.InvokeAsync();
    }
}
