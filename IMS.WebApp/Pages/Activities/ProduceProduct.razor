@page "/produce"
@attribute [Authorize]
@using IMS.WebApp.ViewModels

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<h3>Produce Product</h3>
<br/>
<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
@if(_produceViewModel is not null)
{
    <EditForm Model="_produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

            <div class="form-group">
                <label for="po">Production Number</label>
                <InputText id="name" @bind-Value="_produceViewModel.ProductionNumber" class="form-control"></InputText>
            </div>

            <div class="form-group">
                <label for="inv">Product to Produce</label>
                <ViewProductsComponent DisplayResult="true" OnSelectProduct="OnSelectProduct"></ViewProductsComponent>
                <InputText id="inv" @bind-Value="_produceViewModel.ProductName" class="form-control" disabled></InputText>
                <input type="text" class="form-control" disabled value="@_selectedProduct?.ProductName" />
                <input type="hidden" value="@_produceViewModel.ProductId">
            @if (_selectedProduct is not null)
            {
                <text>Price: </text> @_selectedProduct?.Price.ToString("c");
            }
            </div>

            <div class="form-group">
                <label for="qty">Quantity</label>
                <InputNumber id="qty" @bind-Value="_produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
            </div>

            <button type="submit" class="btn btn-primary">Produce</button>
    </EditForm>
}

@code 
{
    private ProduceViewModel _produceViewModel = new ProduceViewModel();
    private Product _selectedProduct;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        if(!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(this._selectedProduct, this._produceViewModel.QuantityToProduce))
        {
            errorMessage = $"The inventories are not enough for producing the PRODUCT: {this._selectedProduct.ProductName} X {this._produceViewModel.QuantityToProduce} times";
            return;
        }

        await ProduceProductUseCase.ExecuteAsync(
            this._produceViewModel.ProductionNumber,
            this._selectedProduct,
            this._produceViewModel.QuantityToProduce,
            this._selectedProduct.Price,
            "Samuel"
        );
        this._selectedProduct = null;
        this._produceViewModel = new ProduceViewModel();
    }

    public void OnSelectProduct(Product product)
    {
        this._selectedProduct = product;
        _produceViewModel.ProductId = product.ProductId;
        _produceViewModel.ProductName = product.ProductName;
    }
}
