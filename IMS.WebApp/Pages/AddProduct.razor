@page "/addProduct"
@inject IAddProductUseCase AddProductUseCase; 
@inject NavigationManager NavigationManager;

<h3>Add Product</h3>
<br/>

@if(product is not null)
    {
        <EditForm Model="product" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div class="form-group">
                <label for="name">Product Name</label>
                <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
            </div>

            <div class="form-group">
                <label for="Quantity">Quantity</label>
                <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
            </div>

            <ProductInventoriesComponent @ref="ProductInventoriesComponent"></ProductInventoriesComponent>
            <br/>
            <button type="submit" class="btn btn-primary">Save</button>

        </EditForm>
    }

@code 
{
    private Product product;
    private ProductInventoriesComponent ProductInventoriesComponent;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        product = new();
    }

    private async Task OnValidSubmit()
    {
        if(this.product is not null)
        {
            ProductInventoriesComponent.ProductInventories.ForEach(x =>
            {
                x.ProductId = this.product.ProductId;
            });

            this.product.ProductInventories = ProductInventoriesComponent.ProductInventories;
            await AddProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
